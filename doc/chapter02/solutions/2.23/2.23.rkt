#lang racket/base
;;; Процедура for-each похожа на map. В качестве аргументов она принимает процедуру и спи-
;;; сок элементов. Однако вместо того, чтобы формировать список результатов, for-each просто
;;; применяет процедуру по очереди ко всем элементам слева направо. Результаты применения про-
;;; цедуры к аргументам не используются вообще — for-each применяют к процедурам, которые
;;; осуществляют какое-либо действие вроде печати.
;;; Значение, возвращаемое вызовом for-each (оно в листинге не показано) может быть каким
;;; угодно, например истина. Напишите реализацию for-each.


(define (for-each foo items)
	(cond ((null? items) true)
		(else (foo (car items))
					(for-each foo (cdr items)))))


; Экспорт процедуры
(provide for-each)